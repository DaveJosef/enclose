boolean add(E e);
boolean addAll(Collection<? extends E> c);
void clear();
boolean remove(Object o);
boolean removeAll(Collection<?> c);
boolean retainAll(Collection<?> c);
E pollFirst();
E pollLast();
default void replaceAll(UnaryOperator<E> operator);
E set(int index, E element);
default void sort(Comparator<? super E> c);
boolean offer(E e);
E poll();
void addFirst(E e);
void addLast(E e);
boolean offerFirst(E e);
boolean offerLast(E e);
E removeFirst();
E removeLast();
boolean removeFirstOccurrence(Object o);
boolean removeLastOccurrence(Object o);
void push(E e);
E pop();
V put(K key, V value);
default boolean replace(K key, V oldValue, V newValue);
void putAll(Map<? extends K, ? extends V> m);
default V putIfAbsent(K key, V value);
default V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction);
default V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction);
default V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction);
default V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction);
Map.Entry<K,V> pollFirstEntry();
Map.Entry<K,V> pollLastEntry();
